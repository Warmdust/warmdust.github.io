<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>标题</title>
    <link href="/2023/09/08/001/"/>
    <url>/2023/09/08/001/</url>
    
    <content type="html"><![CDATA[<h1 id="从一个自称-Go-最快排序说起"><a href="#从一个自称-Go-最快排序说起" class="headerlink" title="从一个自称 Go 最快排序说起"></a>从一个自称 Go 最快排序说起</h1><p>本次的分享主题来源于一条朋友圈，标题就是最快的排序。这个标题特别吸引我的注意，本着这个排序到底是个什么玩意儿的心态点了进去，得到的有效信息其实不多（其实只得到了这个排序叫 pdqsort 在 Go 语言中是最快的）。我想都不用想，一猜就肯定在吹牛，凭什么他说最快就最快。之前在上数据结构课程的时候对于一些基本的排序还是有一定的了解的，对于这些排序也都是采用过不小的数据集进行测试过的，我完全接受不了说那种排序是最快的这种话的！！！！</p><p><a><img src="/img/001/001.png" width="30%" height="auto"></a></p><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>通过查询资料得知 pdqsort 是一个混合排序算法，对于这个混合排序我了解的不多，于是我打开了我的搜索引擎，输入了“混合排序的介绍”。。。。以下是我查询到的一些资料</p><p>Go、Rust、C ++ 的默认排序算法虽然名义上叫快速排序（quicksort），但其实质是混合排序算法（hybrid sorting algorithm），它们虽然在大部分情况下会使用快速排序算法，但是也会在不同情况下切换到其他排序算法。”涨知识了“，我一直以为他们就是在课本上学习的快速排序而已。。。</p><p><a><img src="/img/001/002.png" width="30%" height="auto"></a></p><h1 id="混合排序"><a href="#混合排序" class="headerlink" title="混合排序"></a>混合排序</h1><p>一般来说，常见的混合排序算法，都会在元素较少（这个值一般是 16 ~ 32）的序列中切换成插入排序（insertion sort），在其他情况下，默认使用快速排序算法。</p><p>然而，快速排序算法有可能因为 pivot 选择的问题（有些序列 pivot 选择不好，导致性能下降很快）而导致在某些情况下可能到达最坏的时间复杂度 O(n^2)，为了保证快速排序算法部分在最坏情况下，我们的时间复杂度仍然为 O(n* logn)，所以在特定的条件下会转换成其他的排序。</p><p>用一句话来说“目前流行的混合排序算法基本都是在不同的情况，使用不同的方式排序来达到最优解”。</p><p><a><img src="/img/001/003.png" width="30%" height="auto"></a></p><p>按照上面的解释我好像可以理解一点号称最快了，毕竟可以通过不同的序列变换不同的排序方式。根据不同的序列不断的变换排序方法确实可以在理论上达到最优解，但是，我对于这个还是持怀疑的态度，根据一个序列选择最优的排序方法，这个也太难了吧！！！</p><p><a><img src="/img/001/004.png" width="30%" height="auto"></a></p><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><p>带着上面的怀疑我开始了搜索大法，最后搜索到了一篇论述 pdqsort 的论文。论文中解释了 pdqsort 是一个基于插入排序、堆排序和快速排序所组合的排序。论文地址：<a href="https://arxiv.org/pdf/2106.05123.pdf">https://arxiv.org/pdf/2106.05123.pdf</a></p><p>我相信大家对于上述的排序都是知道的，我下面就简单的介绍一下，帮大家在回忆一下吧。</p><p><a><img src="/img/001/005.png" width="30%" height="auto"></a></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="排序过程"><a href="#排序过程" class="headerlink" title="排序过程"></a>排序过程</h3><ol><li>从第一个元素开始,认为第一个元素已经被排序</li><li>取出下一个元素,在已排好序的序列中从后往前扫描</li><li>如果该元素(已排好序)大于新元素,将该元素移到下一位置</li><li>重复步骤3,直到找到已排好序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2-5</li></ol><h3 id="动图介绍"><a href="#动图介绍" class="headerlink" title="动图介绍"></a>动图介绍</h3><p><a><img src="/img/001/006.gif" width="80%" height="auto"></a></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="排序过程-1"><a href="#排序过程-1" class="headerlink" title="排序过程"></a>排序过程</h3><ol><li>将待排序的元素构建成一个二叉堆。首先将所有元素插入到一个数组中，然后从最后一个非叶子节点开始，向下调整堆的结构，使得每个节点的值都大于或等于其子节点的值（对于大根堆）或小于或等于其子节点的值（对于小根堆）。</li><li>取出堆的根节点，即堆中最大的元素，并将其放到数组的末尾。</li><li>将剩余的元素重新构建成一个堆，方法是将根节点的值替换为最后一个元素，然后从最后一个非叶子节点开始，向下调整堆的结构。</li><li>重复步骤2和步骤3，直到所有元素都被排序。</li></ol><h3 id="动图介绍-1"><a href="#动图介绍-1" class="headerlink" title="动图介绍"></a>动图介绍</h3><p><a><img src="/img/001/007.gif" width="80%" height="auto"></a></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="排序过程-2"><a href="#排序过程-2" class="headerlink" title="排序过程"></a>排序过程</h3><p>快速排序使用分治算法来把一个序列分为两个子序列,具体算法描述如下：</p><p>\1. 从序列中选择最右边的数作为基准,称为 “基准值”（pivot）；</p><p>\2. 遍历排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面；</p><p>\3. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p><h3 id="动图介绍-2"><a href="#动图介绍-2" class="headerlink" title="动图介绍"></a>动图介绍</h3><p><a><img src="/img/001/008.gif" width="80%" height="auto"></a></p><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>时间复杂度</p><table><thead><tr><th></th><th>最好情况</th><th>一般情况</th><th>最坏情况</th></tr></thead><tbody><tr><td>插入排序</td><td>O(n)</td><td>O(n^2)</td><td>O(n^2)</td></tr><tr><td>堆排序</td><td>O(n*logn)</td><td>O(n*logn)</td><td>O(n*logn)</td></tr><tr><td>快速排序</td><td>O(n*logn)</td><td>O(n*logn)</td><td>O(n^2)</td></tr></tbody></table><p><a href="https://www.jianshu.com/p/958b346130b9">https://www.jianshu.com/p/958b346130b9</a></p><p>看完上面这篇文章其实结论就一个，当数据量比较小的时候插入排序是性能最好的（其实我有点不理解哈）</p><p>综合性能来看快速排序是最好的，堆排序和归并排序是比较稳定的。</p><h1 id="pdqsort（go）实现分析"><a href="#pdqsort（go）实现分析" class="headerlink" title="pdqsort（go）实现分析"></a>pdqsort（go）实现分析</h1><p>项目地址：<a href="https://github.com/zhangyunhao116/pdqsort">https://github.com/zhangyunhao116/pdqsort</a></p><p>本来都按照项目代码直接进行分析了，后面看到了这个排序方法的开发者发表的一篇文章。其中讲述了开发过程中不断优化的过程，我觉得一步步优化的过程比较有意思，所以这一章节直接重新写了一遍。</p><h2 id="初步构思"><a href="#初步构思" class="headerlink" title="初步构思"></a>初步构思</h2><p>上面对于一些基础排序也是进行了分析，也了解了 qdqsort 是有插入排序、堆排序和快速排序混合组成的。既然它是通过混合上述几种排序所组成的，那么肯定是要集成这几种排序的优点，进行一个扬长避短。</p><p>思路如下：</p><ul><li>通过 Benchmark 测试结果可以看出，对于短序列的排序使用插入排序是最快的，则可以对序列长度判断</li></ul><p>当序列长度在一个区间时，采用插入排序。</p><ul><li>非短序列的情况来看快速排序的综合性能比较高，对于非短序列则使用快速排序</li><li>根据理论分析结果来看快速排序在基准值值比较差的时候，时间复杂度有可能会达到 O(n^2)，采用堆排序保底，以至于不会过于的慢。</li></ul><p>按照上述思路来看，我们需要确定两个东西：什么长度的序列叫做短序列？什么情况快速排序会转变成堆排序？</p><p>看了一下项目代码，对于短序列的长度规定为小于等于 24。</p><p>当选择的基准值进行第一次排序时，发现基准值的位置小于 bits.Len(length) 时认定快速排序效果不佳，即转换为堆排序。流程图如下：</p><p><a><img src="/img/001/009.png" width="80%" height="auto"></a></p><h2 id="初步优化"><a href="#初步优化" class="headerlink" title="初步优化"></a>初步优化</h2><p>按照在课本上学习的快速排序来看基准值一般都是选择第一个数据为基准值的。但是，我们知道基准值为中位数的时候才是最优的选择。当我们真的选择真正的中位数的时候，基本上只有一个方法那就是 —&gt; 遍历序列。想都不用想这个方式时不可行的。那我们只能退而求其次选取一个近似中位数。</p><p>选择近似中位数方案如下：</p><ul><li>短序列（&lt;&#x3D; 8）选取第一个元素</li><li>中序列（&lt;&#x3D;50） median of three</li><li>长序列（&gt; 50） median of medians</li></ul><h4 id="median-of-three"><a href="#median-of-three" class="headerlink" title="median of three"></a>median of three</h4><p>这个方法是分别取最左边、最右边、中间三个值，然后选出其中间值作为 pivot。例如 [4,3,2,1]，我们会选取 4 3 1 然后选择其中的 3 作为 pivot。这种方式相比于首个元素的方式会更加合理，因为采样了多个元素，不容易受到一些极端情况的影响，往往会比首个元素的方式有更好的效果。</p><p>stackoverflow discussion:</p><p><a href="https://stackoverflow.com/questions/7559608/median-of-three-values-strategy">https://stackoverflow.com/questions/7559608/median-of-three-values-strategy</a></p><h4 id="median-of-medians"><a href="#median-of-medians" class="headerlink" title="median of medians"></a>median of medians</h4><p>这个方法的原理其实和 median of three 相似，不同的地方在于加大了 pivot 的采样范围，在 array 长度较长的情况下理论表现会更好。其采样步骤是先将 array 分为 n&#x2F;5 个 sub-arrays，n 为 array 的长度。然后将这些 sub-arrays 的 medians 都取出，选取这些 medians 中的 median，同样的方式如此反复，最后得到一个 median of medians 作为最后的 pivot。</p><p>stackoverflow discussion:</p><p><a href="https://stackoverflow.com/questions/5605916/quick-sort-median-selection">https://stackoverflow.com/questions/5605916/quick-sort-median-selection</a></p><p>Median-finding Algorithm:</p><p><a href="https://brilliant.org/wiki/median-finding-algorithm/#citation-1">https://brilliant.org/wiki/median-finding-algorithm/#citation-1</a></p><p>采样数据反正都采样了不能只用于选择基准值呀，于是就有了下述的优化方案</p><ul><li>采样元素为逆序，推测系列已经是逆序，revers 学列</li><li>采样元素为顺序，推测序列已经是顺序，使用插入排序</li></ul><p>使用插入排序的时候，我们不能无脑的一直插入排序到排序完成，所以需要限制一下排序次数</p><p>流程图如下：</p><p><a><img src="/img/001/010.png" width="80%" height="auto"></a></p><h2 id="最终优化"><a href="#最终优化" class="headerlink" title="最终优化"></a>最终优化</h2><p>我们都知道快速排序是有可能交换相同元素的，所以当一个序列重复度比较高的时候，快速排序效率会比较低。</p><p>跟选择中位数一样，我们不能通过遍历去获取判断结果，所以也只能从采样元素入手。</p><p>如果两次分区的基准值相同的时候，按照快速排序的原理，可以知道知道这两次的排序其实是重复的，没必要都执行的。所以当前基准值和上一次的基准值是一致的情况下使用 partitionEqual 函数将重复元素排列到一起，这样就可以有效的解决无效分区的情况。流程图如下：</p><p><a><img src="/img/001/011.png" width="80%" height="auto"></a></p><h1 id="杂述"><a href="#杂述" class="headerlink" title="杂述"></a>杂述</h1><p>go pdqsort benchmark 测试结果  <a href="https://github.com/zhangyunhao116/pdqsort#benchmark">https://github.com/zhangyunhao116/pdqsort#benchmark</a></p><p>go pdqsort 已经是 go 官方所默认的排序了 <a href="https://github.com/golang/go/issues/50154">https://github.com/golang/go/issues/50154</a></p><p>Go 原有的算法类似于 introsort，其通过递归次数来决定是否切换到 fall back 算法，而 pdqsort 使用了另一种计算方式（基于序列长度），使得切换到 fall back 算法的时机更加合理。</p><p>在纯粹的算法层面，即 pdqsort (with sort.Interface) ，pdqsort 在完全随机的情况下和原有算法（类似于 IntroSort）性能几乎一致。在常见的场景下（例如序列有序|几乎有序|逆序|几乎逆序|重复元素较多）等情况下，会比原有的算法快 1~30 倍。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/golang/go/issues/50154">https://github.com/golang/go/issues/50154</a></p><p><a href="https://zhuanlan.zhihu.com/p/506017637">https://zhuanlan.zhihu.com/p/506017637</a></p><p><a href="https://www.jianshu.com/p/958b346130b9">https://www.jianshu.com/p/958b346130b9</a></p><p><a href="https://arxiv.org/pdf/2106.05123.pdf%E6%8E%92%E5%BA%8F%E6%9D%A5%E8%BE%BE%E5%88%B0%E6%9C%80%E4%BC%98%E8%A7%A3%E2%80%9D%E3%80%82">https://arxiv.org/pdf/2106.05123.pdf排序来达到最优解”。</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
      <category>PlayStation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid，upyun</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建一个 hexo 博客</title>
    <link href="/2023/09/07/002/"/>
    <url>/2023/09/07/002/</url>
    
    <content type="html"><![CDATA[<h1 id="通过-GitHub-Page-白嫖个网站"><a href="#通过-GitHub-Page-白嫖个网站" class="headerlink" title="通过 GitHub Page 白嫖个网站"></a>通过 GitHub Page 白嫖个网站</h1><p><strong>这篇文章的产生原因十分的简单 — 语雀的分享功能收费了！！！！</strong></p><p>最开始写东西的时候都是存在电脑里的，想要看的时候就打开电脑查看一下。这样的方式虽然也没有什么大问题，但是当一个东西存在了，人嘛总是会想这有没有更好、更方便的方式。通过本地存储的方式记录笔记一段时间后，差不多大三的时候就有了自己搭建一个记笔迹平台的想法了了。后面，通过了解后发现搭建一个平台还是比较复杂的（服务器、域名、解析……），然后这个想法就搁置了……（反正自己也写不了几篇，想想也就没这个必要了）</p><p><a><img src="/img/002/001.png" width="30%" height="auto"></a></p><p>通过一些机缘巧合，我知道了语雀这个软件，发现语雀确实很好用，里面的功能很强大：多端操作、免费存储这些就足矣让人使用了。最关键的是语雀支持一键分享功能，当文章被分享后，任何人通过链接就可以访问这篇文章，这个功能让我十分喜欢。可惜后面这个功能收费了，再加上我又是个比较抠的人，所以开始寻找别的方式。最后选择了在 GitHub Page 搭建。</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>在开始搭建之前是有一些前置条件的 ：有一个 GitHub 账号、电脑上有 Git 环境、有 NodeJS 环境</p><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>在 GitHub 中新建一个仓库用于存放后续网页存放的仓库。</p><p>填写仓库名，格式必须为&lt;用户名&gt;.github.io ，在步骤二中有相关测试。</p><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><p>点击仓库的 Settings 进入下图，按照图片中配置选择好后点击 Save</p><p><a><img src="/img/002/002.png" width="80%" height="auto"></a></p><p>点击 Save 后，进入 actions 中等待黄色图标变成绿色图标后网站就构建完成了</p><p><a><img src="/img/002/003.png" width="80%" height="auto"></a></p><p>等构建成功后，再回到 Settings –&gt; Pages 页面就的到了一个属于你自己的网站，网址就是页面上的那个</p><p><a><img src="/img/002/004.png" width="80%" height="auto"></a></p><p>步骤一中的描述了命名规范，这里我不确定是我已经创建过了才会出现以下情况</p><p>我创建的仓库名为 warm.github.io 我的用户名为 warmdust </p><p>最后网址变成 <a href="https://warmdust.github.io/warm.github.io/">https://warmdust.github.io/warm.github.io/</a></p><p><a><img src="/img/002/005.png" width="80%" height="auto"></a></p><h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>编写一个简单的 HTML 测试一下，新建一个 index.html 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;title&gt;测试&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;我的第一个标题&lt;/h1&gt;<br>    &lt;p&gt;我的第一个段落。&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>访问 <a href="https://warmdust.github.io/index.html">https://warmdust.github.io/index.html</a> </p><p><a><img src="/img/002/006.png" width="80%" height="auto"></a></p><p>按照上述的方法我们可以重复建立文件这样就可以实现通过连接访问笔记了</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>按照上述的步骤一步步完成确实可以做到通过链接访问笔记了。</p><p>人嘛总是不知足的，反正做都做了，咱们干脆做的更加完善一点，使用 Hexo 搭建一个博客</p><p>执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install -g hexo-cli  // 安装 hexo 环境<br>hexo -v                  // 查看安装 hexo 版本<br>hexo init blog           // 使用 hexo 新建一个名称为 blog 的项目<br>cd blog                  // 进入 blog 项目<br>hexo g                   // 启动<br>hexo server<br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看搭建的博客</p><p><a><img src="/img/002/007.png" width="80%" height="auto"></a></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>可以在 hexo 官网（<a href="https://hexo.io/themes/%EF%BC%89%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%BB%E9%A2%98">https://hexo.io/themes/）选择一个自己喜欢的主题</a> ，我自己选择了 fluid 主题（封面那张图片真的太戳我了！！！）</p><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a> 在网站中选择一个自己想要的版本</li><li>Hexo 5.0.0 版本以上的用户，在博客目录下创建 _config.fluid.yml 文件，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml(opens new window)</a>全部配置（或部分配置）复制过去。以后如果修改任何主题配置，都只需修改 _config.fluid.yml 的配置即可。</li></ul><p>按章上述两个步骤就可以正常使用了</p><p><a><img src="/img/002/008.png" width="80%" height="auto"></a></p><h3 id="Fliud-的一些配置"><a href="#Fliud-的一些配置" class="headerlink" title="Fliud 的一些配置"></a>Fliud 的一些配置</h3><p>官方文档：<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs plain"># 配置页面 slogan<br>slogan:<br>    enable: true<br>    text: &quot;An elegant Material-Design theme for Hexo&quot;<br><br># 页面顶部大图<br>banner_img: /img/default.png<br><br># 导航栏的相关配置<br>navbar:<br>  # 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示<br>  # The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config<br>  blog_title: &quot;warmdust&quot;<br><br># 每篇博客的开头都有这几个配置<br>title: 文章标题<br>tags: [Hexo, Fluid]<br>index_img: /img/default.png<br>date: 2019-10-10 10:00:00<br><br># 文章页<br>post:<br>  # 文章标题下方的元信息<br>  meta:<br>    # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author <br>    author:<br>      enable: false<br>    # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期<br>    date:<br>      enable: true<br>      # 格式参照 ISO-8601 日期格式化<br>      format: &quot;LL a&quot;<br>    # 字数统计<br>    wordcount:<br>      enable: true<br>    # 估计阅读全文需要的时长<br>    min2read:<br>      enable: true<br>      # 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节<br>      awl: 2<br>      # 每分钟阅读字数，如果大部分是技术文章可适度调低<br>      wpm: 60<br>    # 浏览量计数<br>    views:<br>      enable: false<br>      # 统计数据来源<br>      source: &quot;busuanzi&quot;<br></code></pre></td></tr></table></figure><h3 id="图片存储"><a href="#图片存储" class="headerlink" title="图片存储"></a>图片存储</h3><p>由于是部署在 github 上面所以加载图片会比较的慢，建议对图片进行压缩 <a href="https://www.67tool.com/images/imgCompress?ref=crx">压缩网站</a> 。当然使用一些公共的图床会是一种更好的选择。</p><p>以下是不使用图床的方式存储图片</p><ul><li>将文件存放在 themes&#x2F;fluid&#x2F;source&#x2F;img 目录下</li><li>markdown 中使用相对路径进行访问</li><li>如果需要控制图片大小等，可以使用 html <img> 标签</li></ul><h3 id="评论功能（后续进行尝试）"><a href="#评论功能（后续进行尝试）" class="headerlink" title="评论功能（后续进行尝试）"></a>评论功能（后续进行尝试）</h3><p>开启评论需要在<strong>主题配置</strong>中开启并指定评论模块：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br></code></pre></td></tr></table></figure><p>然后在下方还要设置对应评论模块的参数，比如 disqus 对应设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">shortname:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p>当前支持的评论插件如下：</p><ul><li><a href="https://valine.js.org/configuration.html">Valine(opens new window)</a>:基于 LeanCloud</li><li><a href="https://waline.js.org/">Waline(opens new window)</a>: 从 Valine 衍生而来，额外增加了服务端和多种功能</li><li><a href="https://github.com/gitalk/gitalk">Gitalk(opens new window)</a>: 基于 GitHub Issues</li><li><a href="https://utteranc.es/">Utterances(opens new window)</a>: 基于 GitHub Issues</li><li><a href="https://disqus.com/">Disqus(opens new window)</a>: 基于第三方的服务</li><li><a href="http://changyan.kuaizhan.com/">畅言(opens new window)</a>: 基于第三方的服务</li><li><a href="https://www.livere.com/">来必力(Livere)(opens new window)</a>: 基于第三方的服务</li><li><a href="https://remark42.com/">Remark42(opens new window)</a>: 需要自托管服务端</li><li><a href="https://twikoo.js.org/">Twikoo(opens new window)</a>: 基于腾讯云开发</li><li><a href="https://cusdis.com/">Cusdis(opens new window)</a>: 基于第三方服务或自托管服务</li><li><a href="https://giscus.app/zh-CN">Giscus(opens new window)</a>: 基于 GitHub Discussion</li></ul><p>使用方式和参数设置请点击上面链接查看各自的文档。</p><p>若想自己添加新的评论插件，可通过 <a href="https://hexo.fluid-dev.com/docs/guide/#%E8%87%AA%E5%AE%9A%E4%B9%89-js-css-html">自定义功能</a> 加入并判断是否存在 #comments 元素进行挂载。</p><blockquote><p> TIP</p><p>国内用户推荐使用 Valine、Waline 或者 twikoo</p><p>如果设置后评论模块没有显示，说明配置没有完成，或者配置有误出现报错（请在浏览器控制台查看具体报错）</p></blockquote><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>这个配置是比较特殊的，这两个配置都是自动添加的，当文章开头的 Front-matter 新增了没有出现过的类型，在分类和标签页面会自动添加的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">从一个自称</span> <span class="hljs-string">Go</span> <span class="hljs-string">最快排序说起</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">categories:</span> [<span class="hljs-string">Diary</span>, <span class="hljs-string">PlayStation</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/001/011.png</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-09-07 12:00:00</span><br></code></pre></td></tr></table></figure><h2 id="发布到-GitPages"><a href="#发布到-GitPages" class="headerlink" title="发布到 GitPages"></a>发布到 GitPages</h2><ul><li>安装hexo-deployer-git</li></ul><p>npm install hexo-deployer-git –save</p><ul><li>修改根目录下的 _config.fluid.yml，配置 GitHub 相关信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/Warmdust/warmdust.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></code></pre></td></tr></table></figure><ul><li>hexo g -d 部署到 github</li><li>老规矩-等待 action 变成绿色构建完毕</li><li>访问 <a href="https://warmdust.github.io/">https://warmdust.github.io/</a></li></ul><p><strong>注意 token 的构建方法如下</strong></p><p><a><img src="/img/002/009.png" width="80%" height="auto"></a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
      <category>PlayStation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
